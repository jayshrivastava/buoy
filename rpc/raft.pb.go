// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VoteRequest struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	RaftServerId         int32    `protobuf:"varint,2,opt,name=RaftServerId,proto3" json:"RaftServerId,omitempty"`
	LastLogIndex         int32    `protobuf:"varint,3,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm          int32    `protobuf:"varint,4,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *VoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRequest.Unmarshal(m, b)
}
func (m *VoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRequest.Marshal(b, m, deterministic)
}
func (m *VoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequest.Merge(m, src)
}
func (m *VoteRequest) XXX_Size() int {
	return xxx_messageInfo_VoteRequest.Size(m)
}
func (m *VoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequest proto.InternalMessageInfo

func (m *VoteRequest) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetRaftServerId() int32 {
	if m != nil {
		return m.RaftServerId
	}
	return 0
}

func (m *VoteRequest) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *VoteRequest) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type VoteResponse struct {
	NewTerm              int32    `protobuf:"varint,1,opt,name=NewTerm,proto3" json:"NewTerm,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *VoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteResponse.Unmarshal(m, b)
}
func (m *VoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteResponse.Marshal(b, m, deterministic)
}
func (m *VoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponse.Merge(m, src)
}
func (m *VoteResponse) XXX_Size() int {
	return xxx_messageInfo_VoteResponse.Size(m)
}
func (m *VoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponse proto.InternalMessageInfo

func (m *VoteResponse) GetNewTerm() int32 {
	if m != nil {
		return m.NewTerm
	}
	return 0
}

func (m *VoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type AppendEntriesRequest struct {
	Term                 int32            `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId             int32            `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PrevLogIndex         int32            `protobuf:"varint,3,opt,name=PrevLogIndex,proto3" json:"PrevLogIndex,omitempty"`
	PrevLogTerm          int32            `protobuf:"varint,4,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	LeaderCommitIndex    int32            `protobuf:"varint,6,opt,name=LeaderCommitIndex,proto3" json:"LeaderCommitIndex,omitempty"`
	Entries              map[int32]string `protobuf:"bytes,7,rep,name=Entries,proto3" json:"Entries,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *AppendEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesRequest.Unmarshal(m, b)
}
func (m *AppendEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesRequest.Marshal(b, m, deterministic)
}
func (m *AppendEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRequest.Merge(m, src)
}
func (m *AppendEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesRequest.Size(m)
}
func (m *AppendEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRequest proto.InternalMessageInfo

func (m *AppendEntriesRequest) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() int32 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderCommitIndex() int32 {
	if m != nil {
		return m.LeaderCommitIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() map[int32]string {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesResponse) Reset()         { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()    {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *AppendEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesResponse.Unmarshal(m, b)
}
func (m *AppendEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesResponse.Marshal(b, m, deterministic)
}
func (m *AppendEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesResponse.Merge(m, src)
}
func (m *AppendEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesResponse.Size(m)
}
func (m *AppendEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesResponse proto.InternalMessageInfo

func (m *AppendEntriesResponse) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*VoteRequest)(nil), "rpc.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "rpc.VoteResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "rpc.AppendEntriesRequest")
	proto.RegisterMapType((map[int32]string)(nil), "rpc.AppendEntriesRequest.EntriesEntry")
	proto.RegisterType((*AppendEntriesResponse)(nil), "rpc.AppendEntriesResponse")
}

func init() {
	proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b)
}

var fileDescriptor_b042552c306ae59b = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x4e, 0xea, 0x50,
	0x10, 0xc6, 0x6f, 0x69, 0xa1, 0xdc, 0x81, 0x9b, 0xc0, 0x84, 0x9b, 0xf4, 0x76, 0x45, 0xba, 0xb8,
	0x61, 0xa1, 0x5d, 0xe0, 0xc6, 0xb0, 0xd2, 0x18, 0xa2, 0x18, 0x62, 0x4c, 0x31, 0xee, 0x6b, 0x3b,
	0x18, 0xa2, 0xb4, 0xf5, 0xf4, 0x80, 0xb2, 0xf2, 0x01, 0x7c, 0x21, 0x1f, 0xcf, 0x9c, 0x3f, 0x35,
	0x07, 0x44, 0x57, 0x9c, 0xef, 0x9b, 0x61, 0x66, 0x7e, 0x9d, 0x01, 0x60, 0xf1, 0x9c, 0x87, 0x05,
	0xcb, 0x79, 0x8e, 0x36, 0x2b, 0x92, 0xe0, 0xcd, 0x82, 0xd6, 0x6d, 0xce, 0x29, 0xa2, 0xa7, 0x15,
	0x95, 0x1c, 0x11, 0x9c, 0x1b, 0x62, 0x4b, 0xcf, 0xea, 0x5b, 0x83, 0x7a, 0x24, 0xdf, 0x18, 0x40,
	0x3b, 0x8a, 0xe7, 0x7c, 0x46, 0x6c, 0x4d, 0x6c, 0x92, 0x7a, 0x35, 0x19, 0xdb, 0xf2, 0x44, 0xce,
	0x34, 0x2e, 0xf9, 0x34, 0xbf, 0x9f, 0x64, 0x29, 0xbd, 0x78, 0xb6, 0xca, 0x31, 0x3d, 0xec, 0x43,
	0x4b, 0x6b, 0xd9, 0xc2, 0x91, 0x29, 0xa6, 0x15, 0x5c, 0x42, 0x5b, 0x0d, 0x53, 0x16, 0x79, 0x56,
	0x12, 0x7a, 0xe0, 0x5e, 0xd1, 0xb3, 0x31, 0x50, 0x25, 0x45, 0x2d, 0x91, 0x79, 0xce, 0xe2, 0x8c,
	0x93, 0x1a, 0xa9, 0x19, 0x99, 0x56, 0xf0, 0x5e, 0x83, 0xde, 0x69, 0x51, 0x50, 0x96, 0x8e, 0x33,
	0xce, 0x16, 0x54, 0xfe, 0x84, 0xe8, 0x43, 0x73, 0x4a, 0x71, 0x6a, 0xe0, 0x7d, 0x6a, 0x81, 0x76,
	0xcd, 0x68, 0xbd, 0x8b, 0x66, 0x7a, 0x62, 0x1c, 0xad, 0x4d, 0x34, 0xc3, 0xc2, 0x03, 0xe8, 0xaa,
	0x8a, 0x67, 0xf9, 0x72, 0xb9, 0xe0, 0xaa, 0x54, 0x43, 0xe6, 0x7d, 0x0d, 0xe0, 0x09, 0xb8, 0x7a,
	0x6a, 0xcf, 0xed, 0xdb, 0x83, 0xd6, 0xf0, 0x7f, 0xc8, 0x8a, 0x24, 0xdc, 0xc7, 0x13, 0x6a, 0x29,
	0x7e, 0x36, 0x51, 0xf5, 0x37, 0x7f, 0x04, 0x6d, 0x33, 0x80, 0x1d, 0xb0, 0x1f, 0x68, 0xa3, 0xa1,
	0xc5, 0x13, 0x7b, 0x50, 0x5f, 0xc7, 0x8f, 0x2b, 0x92, 0xc0, 0xbf, 0x23, 0x25, 0x46, 0xb5, 0x63,
	0x2b, 0x18, 0xc3, 0xdf, 0x9d, 0x4e, 0x7a, 0x1f, 0xfb, 0x3e, 0x9d, 0x07, 0xee, 0x6c, 0x95, 0x24,
	0x54, 0x96, 0x7a, 0x0b, 0x95, 0x1c, 0xbe, 0x82, 0x23, 0x6e, 0x04, 0x0f, 0xc1, 0x11, 0x8b, 0xc1,
	0x8e, 0x64, 0x30, 0xae, 0xcd, 0xef, 0x1a, 0x8e, 0x6a, 0x11, 0xfc, 0xc2, 0x0b, 0xf8, 0xb3, 0xd5,
	0x1d, 0xff, 0x7d, 0xcb, 0xee, 0xfb, 0xfb, 0x42, 0x55, 0xa5, 0xbb, 0x86, 0x3c, 0xf4, 0xa3, 0x8f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x42, 0x7a, 0x26, 0xf6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/rpc.Raft/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/rpc.Raft/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) Vote(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedRaftServer) AppendEntries(ctx context.Context, req *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Raft/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Raft_Vote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
